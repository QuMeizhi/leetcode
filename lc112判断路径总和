/**
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
说明: 叶子节点是指没有子节点的节点。
示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。
**/

class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null) return false;
        if(root.val == sum && root.left == null && root.right == null){
            //保证了root.val=goal且当前结点是叶子结点，题目要求是叶子结点
            return true;
        }
        int goal = sum - root.val;
        return hasPathSum(root.left,goal) || hasPathSum(root.right,goal);
        //goal进入递归时候，就变为sum了，所以要看root.val是不是和sum比，因为sum就是goal
    }
}
