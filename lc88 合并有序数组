88. 合并两个有序数组
给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。

说明:
初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
 
示例:
输入:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3
输出: [1,2,2,3,5,6]

//方法1：从结尾开始遍历（因为题中说nums1有足够大的长度，所以可以不必开辟新的数组）
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int tail1 = m - 1;
        int tail2 = n - 1;
        int tail3 = m + n - 1;
        while(tail2 >= 0){
            if(tail1 >= 0 && nums1[tail1] > nums2[tail2]){
                nums1[tail3] = nums1[tail1];
                tail3 --;
                tail1 --;
            }
            else {
                nums1[tail3] = nums2[tail2];
                tail3 --;
                tail2 --;
            }
        }

    }
}



//方法2：开辟一个新的数组，从头开始一一比较，小的先放入新开辟的数组中
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = 0;//nums1
        int j = 0;//nums2
        int k = 0;//nums3
        int[] arr = new int[m + n];
        //两个边界条件：i = m  j = n
        while(i < m || j < n){//其中一个没到头就行，若是&&则其中一个到头就进不来了
            if(i == m){//nums1到头了
                arr[k] = nums2[j];
                k ++;
                j ++;
            }
            else if(j == n){//nums2到头了
                arr[k] = nums1[i];
                k ++;
                i ++;
            }
            else if(nums1[i] > nums2[j]){
                arr[k] = nums2[j];
                k ++;
                j ++;
            }
            else{//nums2[j] > nums1[i]
                arr[k] = nums1[i];
                k ++;
                i ++;  
            }
        }
    //还需要把我们自己新定义的数组拷贝回去，还给题中给的nums1
    for(int q = 0; q < arr.length; q++){
        nums1[q] = arr[q];
    }
    }
}
