136. 只出现一次的数字
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:
输入: [2,2,1]
输出: 1

示例 2:
输入: [4,1,2,1,2]
输出: 4

/*
1.任何数字和0异或 = 其本身   n ^ 0 = n
2.任何数字和其本身异或 = 0   n ^ n = 0
3.异或满足乘法交换律 a ^ b ^ c = a ^ c ^ b
*/
class Solution {
    public int singleNumber(int[] nums) {
        int res = 0;
        for(int i = 0; i < nums.length; i++){
            //第一步：0 ^ nums[i] 0和任何数字异或都是本身，所以不影响整个数组
            res = res ^ nums[i];
        }
/*因为本身和本身异或是0，然后0再和一个数字异或就是其本身，所以重复的数字异或之后是0，然后这个0和不重复的数字异或 = 这个不重复的数字，所以不影响这个不重复的数字，最后那个数字就是我们要找到的不重复的数字*/
    return res;
    }
}
