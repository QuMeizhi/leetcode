75. 颜色分类
给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
注意:
不能使用代码库中的排序函数来解决这道题。

示例:
输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]

进阶：
一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？



//保证[0,i)都是0，[j,nums.length - 1]都是2
//还要保证i指针左边都是0/1，所以等2的时候交换不能i++，因为不知道交换过来的是多少，所以不能i--
//low和high用于固定元素，i用于移动遍历元素
class Solution {
    public void sortColors(int[] nums) {
        int left = 0;
        int right = nums.length - 1;
        int pivot = 0;//基准
        while(pivot <= right){
            if(nums[pivot] == 0){//因为0要放到最左边，所以和left交换
                int tmp = nums[pivot];
                nums[pivot] = nums[left];
                nums[left] = tmp;
                left ++;
                pivot ++;
            }else if(nums[pivot] == 1){//1就不需要交换，直接下一个
                pivot ++;
            }else if(nums[pivot] == 2){//因为2要放到最右边，所以和right交换
                int tmp = nums[pivot];
                nums[pivot] = nums[right];
                nums[right] = tmp;
                right --;
/*不需要pivot ++了，因为不知道目前nums[pivot]是0 还是 1，所以如果pivot ++就会跳过这个元素（若果是0这个元素还要再次交换，所以不能pivot ++）*/
            }
        }
    }
}
