给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:
输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: s = "pwwkew"
输出: 3

解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

class Solution {
    public int lengthOfLongestSubstring(String s) {
    //利用滑动窗口，右指针判断是否有重复值，左指针把重复的剔出窗口中
        Map<Character, Integer> hashmap = new HashMap<>();
        int maxLength = 0;
        for(int left = 0, right = 0; right < s.length(); right ++){
            if(hashmap.containsKey(s.charAt(right))){
                left = Math.max(left, hashmap.get(s.charAt(right)) + 1);//把left更新为原来存下来的right + 1，因为原来right指针的位置重复了，要剔出窗口，所以 + 1,是把left移动到原来重复的下一位 而不是现在发现的这个
            }
            hashmap.put(s.charAt(right), right);//把right指针的值存入/right指针的值和之前重复，所以更新为新的，覆盖原来重复的
            maxLength = Math.max(maxLength, right - left + 1);
        }
    return maxLength;
    }
}
