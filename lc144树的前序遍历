//写法1：递归
class Solution {
    List<Integer> res = new ArrayList<>();
    //要放在外边，要不然每次调用preorderTraversal就会重新newlist，就清空了
    public List<Integer> preorderTraversal(TreeNode root) {
        
        if(root == null) return res;
        res.add(root.val);
        preorderTraversal(root.left);
        preorderTraversal(root.right);
    return res;
    }
}

//写法2：用栈迭代
class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        while(root != null || !stack.isEmpty()){//root,left,right
            if(root != null){
                res.add(root.val);
                stack.push(root);
                root = root.left;//不断向左子树找
            }else{//到了空结点，找到了最左边叶子结点的左孩子（一个空结点）
                root = stack.pop();//回溯
                root = root.right;//因为根和左子树已经打印完了，所以要开始打印右子树了
            }
        }
    return res;
    }
}
