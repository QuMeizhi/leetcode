64. 最小路径和
给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。

示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

/*定义数组元素的含义：目的求从左上角到右下角的最小路径和是多少，所以定义dp[i][j]:从左上角到(i,j)位置的
最小路径和，那么，dp[m - 1][n - 1]即是我们要求的答案
*/
class Solution {
    public int minPathSum(int[][] grid) {
        //dp数组中的每个元素都是记录着从初始点--这个点的最小路径的值
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        //base case 初始值
        //初始值计算所有的dp[0...m - 1][0]和所有的dp[0][0...n - 1]
        dp[0][0] = grid[0][0];
        //初始化最左边的列，，也就是一直向下走
        for(int i = 1; i < m; i++){
            dp[i][0] = dp[i - 1][0] + grid[i][0];//上一步的最小路径和+自己这个点的路径
        }
        //初始化最上边的行，也就是一直向右走
        for(int i = 1; i < n; i++){
            dp[0][i] = dp[0][i - 1] + grid[0][i];
        }
        //数组元素之间的关系
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        return dp[m - 1][n - 1];
    }
}
