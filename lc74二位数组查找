/**
编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
示例 1:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
输出: true

**/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0 || matrix[0].length == 0) return false;
        int row = matrix.length;
        int col = matrix[0].length;
        int j = row * col - 1;//尾部指针
//拉成一维了.主要为了确定长度，这样才能确定mid的index
        int i = 0;
        while(i <= j){
            int mid = i + (j - i) / 2;
            int r = mid / col;//行index
            int c = mid % col;//列index
            if(matrix[r][c] == target){
                return true;
            }
            else if(matrix[r][c] > target){
                j = mid - 1;
            }else{
                i = mid + 1;
            }
        }
    return false;
    }
}
