328. 奇偶链表
给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。
请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。

示例 1:
输入: 1->2->3->4->5->NULL
输出: 1->3->5->2->4->NULL

示例 2:
输入: 2->1->3->5->6->4->7->NULL 
输出: 2->3->6->7->1->5->4->NULL
说明:

应当保持奇数节点和偶数节点的相对顺序。
链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
//odd 奇数， even偶数
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null) return null;
        ListNode odd = head;//odd是奇数链表的当前结点，初始化为head(初始化为奇数链表头)
        ListNode even = odd.next;
        //even是偶数链表的当前结点,初始化为链表的第二个结点(也就是奇数链表头的第二个结点)
        ListNode evenHead = even;//偶数链表的头节点，后面用于连接奇数链表
        while(even != null && even.next != null){//因为结尾是偶数，所以用偶数结点判断循环即可
            odd.next = even.next;//相当于odd.next = odd.next.next跳过偶数结点
            odd = odd.next;//连接后，奇数结点走向下一个奇数结点
            even.next = odd.next;//跳过奇数结点进行连接
            even = even.next;//偶数结点向前走向按下一个偶数结点
        }
        odd.next = evenHead;//奇数和偶数结点的内部已经连接完成，下面把奇数结点和偶数链表头连接
    return head;//返回奇数链表头，也就是整个链表的头部
    }
}

//
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null) return null;
        ListNode odd = head;
        ListNode even = odd.next;
        ListNode evenHead = even;
        while(even != null && even.next != null){
            odd.next = odd.next.next;
            odd = odd.next;
            even.next = even.next.next;
            even = even.next;
        }
        odd.next = evenHead;
    return head;
    }
}
