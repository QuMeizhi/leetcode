2. 两数相加
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        if(l2 == null) return l1;
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        int carry = 0;
        //list1和list2都不为空
        while(l1 != null && l2 != null){
            int sum = l1.val + l2.val + carry;//当前位置上的和
            int val = sum % 10;//当前位置的值
            carry = sum / 10;//当前位置要给前一位的进位
            ListNode newnode = new ListNode(val);//当前位置val新建为一个结点
            current.next = newnode;//把新建的node连接起来
            current = current.next;//新链表的结点连接后也要向后移动一位
            l1 = l1.next;
            l2 = l2.next;
        }
        //l1 not null, but l2 is null
        while(l1 != null){
            int val = (l1.val + carry) % 10;
            carry = (l1.val + carry) / 10;
            ListNode newnode = new ListNode(val);
            current.next = newnode;
            current = current.next;
            l1 = l1.next;
        }
        //l2 not null, but l1 is null
        while(l2 != null){
            int val = (l2.val + carry) % 10;
            carry = (l2.val + carry) / 10;
            ListNode newnode = new ListNode(val);
            current.next = newnode;
            current = current.next;
            l2 = l2.next;
        }
        //还剩一个进位，往前加一位carry
        if(carry != 0){
            ListNode newnode = new ListNode(carry);
            current.next = newnode;
        }
    return dummy.next;
    }
}
