494. 目标和
给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。
返回可以使最终数组和为目标数 S 的所有添加符号的方法数。

示例：
输入：nums: [1, 1, 1, 1, 1], S: 3
输出：5

解释：
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
一共有5种方法让最终目标和为3。




class Solution {
    int result = 0;
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        int i = 0;
        backtracking(nums, S, sum, i);
        return result;
    }
    private void backtracking(int[] nums, int S, int sum, int i){
        //base case 终止条件
        if(i == nums.length){
            if(sum == S){
                result ++;
            }
        return;
        }
        //枚举，进行选择
        //选加法
        sum = sum + nums[i];
        backtracking(nums, S, sum, i + 1);
        sum = sum - nums[i];

        //选减法
        sum = sum - nums[i];
        backtracking(nums, S, sum, i + 1);
        sum = sum + nums[i];
    }
}
