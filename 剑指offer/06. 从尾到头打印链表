输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。

示例 1：
输入：head = [1,3,2]
输出：[2,3,1]

限制：
0 <= 链表长度 <= 10000
/*方法1:栈
因为：第一个遍历到的节点要最后一个输出，最后一个遍历到的节点要最先输出，所以类似栈的”先进后出“
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] reversePrint(ListNode head) {
        Stack<Integer> stack = new Stack<>();
        List<Integer> list = new ArrayList<>();
        while(head != null){
            stack.push(head.val);
            head = head.next;
        }
        while(!stack.isEmpty()){
            list.add(stack.peek());
            stack.pop();
        }
        int[] res = new int[list.size()];//不能在前面就初始化，因为这时候list.size()还是0
        for(int i = 0; i < res.length; i++){//把List转为数组的方法
            res[i] = list.get(i);
        }
    return res;
    }
}


/*方法2:因为用了栈，可以想到递归，递归本身就是栈*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] reversePrint(ListNode head) {
        List<Integer> list = new ArrayList<>();
        reverse(head, list);
        int[] res = new int[list.size()];//此处new数组，因为reverse()之后list中才有值
        for(int i = 0; i < list.size(); i++){//List转为数组的方法
            res[i] = list.get(i);
        }
    return res;
    }
    private void reverse(ListNode head, List list){
        //base case
        if(head == null) return;
        //递归，让节点走到最后
        reverse(head.next, list);
        //走到最后之后，return后做的事情：此时指针已经停在了最后一个节点，加入list中
        list.add(head.val);
    }
}
