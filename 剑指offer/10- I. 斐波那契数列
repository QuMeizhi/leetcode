写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：
F(0) = 0,   F(1) = 1
F(N) = F(N - 1) + F(N - 2), 其中 N > 1.
斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

示例 1：
输入：n = 2
输出：1

示例 2：
输入：n = 5
输出：5


方法一：因为递归过程中会导致重复计算，所以把之前已经计算完的结果用一个哈希表记录下来，key = n, value = fib(n)
class Solution {
    public int fib(int n) {
        Map<Integer, Integer> hashmap = new HashMap<>();
        return helper(n, hashmap);
    }
    private int helper(int n, Map<Integer, Integer> hashmap){
        int res = 0;
        int constant = 1000000007;
        if(n == 0) return 0;
        if(n == 1) return 1;
        //递归只考虑一个节点的计算过程即可，因为每个节点都会重复进行这个节点的过程，所有节点的过程都一模一样
        if(hashmap.containsKey(n)){
            return hashmap.get(n);
        }
        //分
        int first = helper(n - 1, hashmap) % constant;
        //把f(n - 1)的指用hashmap记录下来
        hashmap.put(n - 1, first);//key = n, value = f(n)
        int second = helper(n - 2, hashmap) % constant;
        //把f(n - 1)的指用hashmap记录下来
        hashmap.put(n - 2, second);
        //返回
        res = (first + second) % constant;
    return res;
    }
}

