请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

示例 2：
输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

示例 3：
输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

方法一：
/*时间复杂度 O(log_2n)
此算法循环内部仅有 移位、与、加 等基本运算，占用 O(1)O(1) ；逐位判断需循环 log_2 n
空间复杂度 O(1) ： 变量 resres 使用常数大小额外空间。
因为 >>> 1相当于每次除以2，所以循环的次数为num可以除以多少次的2，反过来思考就是2^x = num，x 应该为要求的时间复杂度，利用数学知识求解为log2N，然后题中的n并不是次数。
*/
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int res = 0;
        while(n != 0){
            res += n & 1;//n & 1判断n的尾部是否是1，若=1，则res = res + 1，若n的最后一位 = 0 ，则n & 1 = 0，res + 0
            n = n >>> 1;//右移1位就是把一个数字的二进制的最右边删除，再从最左边补0
        }
    return res;
    }
}
